version: "3.4"

services:
  redis:
    image: redis:7
    restart: always
    networks:
      - booking-backend-app
    container_name: redis
    volumes:
      - booking-redis:/data
    ports:
      - '6379:6379'

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
      - ./src/main/resources/db/booking.sql:/docker-entrypoint-initdb.d/booking.sql
    ports:
      - "5432:5432"
    networks:
      - booking-backend-app
    restart: unless-stopped

  elasticsearch:
    container_name: elastic_search
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.23
    ports:
      - 9200:9200
      - 9300:9300
    restart: always
    networks:
      - booking-backend-app
    volumes:
      - booking-es:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

  rabbitmq:
    image: rabbitmq:3
    restart: always
    container_name: rabbitmq
    networks:
      - booking-backend-app
    ports:
      - "5672:5672"
      - "15672:15672"

  booking-backend:
    container_name: booking-backend
    build:
      context: ./
      dockerfile: Dockerfile
    env_file:
      - ./local.env
    environment:
      - JAVA_TOOL_OPTIONS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"
    ports:
      - "8181:8080"
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - elasticsearch
    networks:
      - booking-backend-app
volumes:
  booking-redis:
    driver: local
  booking-es:
    driver: local
  postgres:
    driver: local

networks:
  booking-backend-app:
    driver: bridge